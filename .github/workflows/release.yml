name: 发布应用

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      
      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
          
      - name: 获取版本
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        shell: bash
        
      - name: 创建发布
        id: create-release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION}`,
              name: `v${process.env.VERSION}`,
              body: '请查看更新日志了解详情',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            arch: x64
          - platform: ubuntu-24.04-arm
            arch: arm64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            x86_64-pc-windows-msvc
            aarch64-unknown-linux-gnu

      - name: 安装依赖 (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc
      
      - name: 安装依赖 (Linux ARM64)
        if: matrix.platform == 'ubuntu-24.04-arm' && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
      
      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: 安装前端依赖
        run: pnpm install
      
      - name: 安装 Linux 构建依赖
        if: matrix.platform == 'ubuntu-24.04-arm' && matrix.arch == 'x64'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libglib2.0-dev build-essential
      
      - name: 安装 Linux ARM64 构建依赖
        if: matrix.platform == 'ubuntu-24.04-arm' && matrix.arch == 'arm64'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config:arm64 \
            libglib2.0-dev:arm64 \
            libgtk-3-dev:arm64 \
            libjavascriptcoregtk-4.1-dev:arm64 \
            libwebkit2gtk-4.1-dev:arm64 \
            gcc-aarch64-linux-gnu
      
      - name: 构建Tauri应用 (Windows x64)
        if: matrix.platform == 'windows-latest' && matrix.arch == 'x64'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          includeUpdaterJson: true
      
      - name: 构建Tauri应用 (Linux ARM64)
        if: matrix.platform == 'ubuntu-24.04-arm' && matrix.arch == 'arm64'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: "--target aarch64-unknown-linux-gnu"
          includeUpdaterJson: true

  publish-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [create-release, build-tauri]
    
    steps:
      - name: 发布Release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            }) 