name: 发布应用

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      # 输出 upload_url 而非 release_id
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_id: ${{ steps.create-release.outputs.release_id }}

    steps:
      - uses: actions/checkout@v3
      
      - name: 获取版本
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
      - name: 创建发布
        id: create-release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION}`,
              name: `v${process.env.VERSION}`,
              body: '请查看更新日志了解详情',
              draft: true,
              prerelease: false
            })
            // 同时输出 upload_url 和 release_id
            core.setOutput('upload_url', data.upload_url)
            core.setOutput('release_id', data.id)
            return data.id

  # 添加共享的安装步骤
  install-dependencies:
    runs-on: ubuntu-latest
    outputs:
      node_modules: ${{ steps.hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'
          
      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: 安装依赖
        run: pnpm install
        
      - name: 生成缓存键
        id: hash
        run: echo "hash=$(find . -type f -name 'pnpm-lock.yaml' -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

  build-tauri:
    needs: [create-release, install-dependencies]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      
      - name: 恢复Node模块缓存
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ needs.install-dependencies.outputs.node_modules }}
          
      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: 安装Windows依赖
        if: matrix.platform == 'windows-latest'
        run: rustup target add x86_64-pc-windows-msvc
          
      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      # 关键修复：使用 upload_url 而非 release_id
      - name: 构建Tauri应用
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          # 使用 upload_url 替代 release_id
          uploadUrl: ${{ needs.create-release.outputs.upload_url }}
          includeUpdaterJson: true
          
  publish-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [create-release, build-tauri]
    
    steps:
      - name: 发布Release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            })